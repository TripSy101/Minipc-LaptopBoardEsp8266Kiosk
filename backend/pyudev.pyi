from typing import Any, Callable, Dict, Iterator, Optional, Union

class Context:
    def __init__(self) -> None: ...
    def list_devices(self, **kwargs: Any) -> Iterator['Device']: ...

class Monitor:
    def __init__(self) -> None: ...
    @classmethod
    def from_netlink(cls, context: Context) -> 'Monitor': ...
    def filter_by(self, subsystem: str) -> None: ...
    def poll(self, timeout: Optional[float] = None) -> Optional['Device']: ...

class Device:
    def __init__(self) -> None: ...
    @property
    def action(self) -> str: ...
    @property
    def device_node(self) -> str: ...
    def get(self, key: str, default: Any = None) -> Any: ...

# Type aliases
DeviceAction = str
DeviceCallback = Callable[[DeviceAction, str], None] 